#In this assignment, we are upto implement a simple app in python-flask (referred to as flask app from now on) and put it behind HAproxy- which will work as a load balancer. 


## Prerequisites:
- Need to create servers and operating network for the requirement in the cleura
- Ansible should be installed in our local host
- Configure the SSH keys for allowance of servers
- The file haproxy.cfg.j2, a HAProxy configuration template, is in the current working directory.
- Application files for Flask that are located in the current working directory.



## Usage:
1. Add the IP addresses or hostnames of your web servers and HAProxy server to the `hosts` file.
2. Use the following command to launch the Ansible playbook: 
               
                ansible-playbook -i hosts site.yaml
 

## Description:
### Tasks
updates every managed host's package list.
- Installs the Pip, Flask, and Gunicorn requirements for Python on web servers so that applications can run.
- On web servers, creates a directory for the Flask application.
- Compiles web server IP addresses for HAproxy setup.
- Uses Gunicorn to run the Flask application as a daemon, conserving resources.
- Uses a Jinja2 template to configure HAproxy for dynamic configuration management.
- Sets up load balancing with HAproxy on a dedicated server.
- Distributes the application2.py Flask code to web servers.

## Notes:
- Make sure the SSH keys are set up correctly so that the target hosts may be accessed.
- Adjust the haproxy.cfg.j2 HAProxy configuration template to your specifications.
- Make sure the Flask application can be accessed via the HAProxy load balancer by extensively testing the deployment.


